##########################################################################
## Dynamic Networking Solutions                                         ##
##########################################################################
## OpenAPRS, Internet APRS MySQL Injector                               ##
## Copyright (C) 1999 Gregory A. Carter                                 ##
##                    Dynamic Networking Solutions                      ##
##                                                                      ##
##    ____                   ___    ____  ____  _____                   ##
##   / __ \____  ___  ____  /   |  / __ \/ __ \/ ___/                   ##
##  / / / / __ \/ _ \/ __ \/ /| | / /_/ / /_/ /\__ \                    ##
## / /_/ / /_/ /  __/ / / / ___ |/ ____/ _, _/___/ /                    ##
## \____/ .___/\___/_/ /_/_/  |_/_/   /_/ |_|/____/                     ##
##     /_/ Gregory A. Carter                                            ##
##         Dynamic Networking Solutions                                 ##
##                                                                      ##
## This program is free software; you can redistribute it and/or modify ##
## it under the terms of the GNU General Public License as published by ##
## the Free Software Foundation; either version 1, or (at your option)  ##
## any later version.                                                   ##
##                                                                      ##
## This program is distributed in the hope that it will be useful,      ##
## but WITHOUT ANY WARRANTY; without even the implied warranty of       ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        ##
## GNU General Public License for more details.                         ##
##                                                                      ##
## You should have received a copy of the GNU General Public License    ##
## along with this program; if not, write to the Free Software          ##
## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            ##
##########################################################################
#$Id: example.conf,v 1.1 2005/11/21 18:16:02 omni Exp $
##########################################################################

##########################################################################
## Variable Key                                                         ##
##########################################################################
##  Type            Description / Example                               ##
## -------------------------------------------------------------------- ##
## <bool>         : Either "true" or "false".                           ##
##                  Example: true                                       ##
## <int>          : Integer value, 0-9, multiple numbers allowed.       ##
##                  Example: 10284                                      ##
## <string>       : Unquoted string of characters.                      ##
##                  Example: The cat is blue.                           ##
##                                                                      ##
##########################################################################

##########################################################################
## OpenAPRS Settings                                                    ##
##########################################################################
## The OpenAPRS daemon may be started in two modes.  The first in the   ##
## background mode which, at the minimum must have the configuration    ##
## file command line parameter set.                                     ##
##                                                                      ##
## Example:                                                             ##
## ./openaprs -c etc/openaprs.conf                                      ##
##                                                                      ##
## The second is debug console mode which, requires the debug switch    ##
## and the configuration file switch to be specified.                   ##
##                                                                      ##
## Example:                                                             ##
## ./openaprs -d -c etc/openaprs.conf                                   ##
##                                                                      ##
## Once in debug console mode all commands sent to OpenAPRS must be     ##
## prefixed with the / character.  Type /help and hit enter for a list  ##
## of currently available commands.                                     ##
##                                                                      ##
## See below for the definition of the ./x/d(A-Z)# output in debug      ##
## console mode.                                                        ##
##                                                                      ##
## /RAW will toggle showing the packets as they arrive.                 ##
## /DEBUG will toggle the massive debug log files created in logs/      ##
## /ECHO will toggle showing either packets/./x/d(A-Z)# output or keep  ##
##       the console silent.                                            ##
## /STATS will display the current stastical data.                      ##
## /QUIT will DUH, exit the program.                                    ##
##                                                                      ##
## Support will be provided in the OpenAPRS forums @ www.openaprs.net   ##
##########################################################################

openaprs {
  #####
  # BURST <string>
  #
  # Burst to send automagically on connect.  Useful for sending the
  # standard password line.
  #
  burst "bursts/auth.burst";

  toggles {
    #####
    # DEBUG <bool>
    #
    # If not specified on the command line default to debug console
    # mode.
    #
    debug false;

    #####
    # ECHO <bool>
    #
    # If in debug console mode, display the dots/x's or the raw data when raw
    # is enabled.
    #
    # .		Packet Processed Successfully
    # x		Packet Dropped (unable to parse or invalid)
    # d(A-Z)#	SQL deletion sequence, A-Z is the letter of the process
    #		# is the number of rows deleted.
    #
    echo true;

    #####
    # RAW <bool>
    #
    # Turn on raw packet output by default when in debug
    # console mode.
    #
    raw false;
  } # openaprs.toggles

  create {  
    #####
    # CALLSIGN <string>
    #
    # Callsign to forward on packets to APRS-IS as.
    #
    callsign "CALLSIGN";

    #####
    # DESTINATION <string>
    #
    # Destination field for creating objects/messages/postitions.
    #
    destination "APOA00";
  } # create

  ##
  # EMAIL
  #
  # APRS->Email gateway support.
  #
  email {
    enable false;
    alias "EMAIL";
    host "localhost";
    port 25;
    admin "gcarter@openaprs.net";
    from "daemon@openaprs.net";
    alerts true;
  } # email

  ##
  # APRSMAIL
  #
  # Email->APRS gateway support.
  #
  aprsmail {
    enable false;
  } # openaprs.aprsmail


  ####
  # MESSAGE
  #
  # Messaging support for the website.
  #
  #
  message {
    ####
    # ACK <boolean>
    # 
    # Send acknowledgements for users actively viewing
    # messages from the website.
    #
    ack false;

    ####
    # timeout <integer>
    #
    # Number of seconds old the users session must be
    # before it is considered expired and no acks
    # should be sent.
    #
    timeout 600;

    ####
    # CALLSIGN
    # 
    # Callsign verification messages are sent to.
    #
    callsign "OPENAPRS";

    ####
    # RETRY <int>
    # 
    # Maximum number of exponential seconds to retry
    # sending message without ack.
    #
    retry 60;
  } # message

  ####
  # POSITION
  #
  # Messaging support for the website.
  #
  #
  position {
    ####
    # TACTICAL <bool>
    #
    # Update tactical table for website users.
    #
    tactical true;
  } # position

  ####
  # OBJECT
  #
  # Object support for the website.
  #
  #
  object {
    ####
    # timeout <integer>
    #
    # Number of seconds old the users session must be
    # before it is considered expired and no acks
    # should be sent.
    #
    timeout 300;

    ####
    # RETRY <int>
    # 
    # Maximum number of exponential seconds to retry
    # sending message without ack.
    #
    retry 30;

  } # object

  sql {
    #####
    # ENABLE <bool>
    #
    # Enable SQL injection system.  If disabled OpenAPRS will not
    # fill the SQL server database with parsed packets.
    #
    # This option is primarily used for debugging.
    #
    enable true;

    #####
    # INJECT <bool>
    #
    # Enable actual injection of records.
    #
    # This option is primarily used for debugging.
    #
    inject true;

    #####
    # DROP_DUPLICATES <bool>
    #
    # Turn on duplicate and delayed packet filtering.
    #
    # This option is primarily used for debugging.
    #
    drop_duplicates false;

    #####
    # HOST <string>
    #
    # IP Address or Host Name of MySQL server to inject data to.
    #
    host "database_host_here";

    #####
    # USER <string>
    #
    # Username to use to authenticate to the MySQL server.
    #
    user "user_name_here";

    #####
    # PASS <string>
    #
    # Password to use to authenticate to the MySQL server.
    #
    pass "database_password_here";

    #####
    # DB <string>
    #
    # Database name to use on the MySQL server.
    #
    db "database_name_here";

    ##
    # CLEANUP <int>
    #
    # Number of seconds old an object must be before it is deleted.
    #
    cleanup 864000 {

      ## LIMIT <int>
      #
      # Limits the number of objects to clean up at a time.
      #
      limit 1000 {
        cache_30m 1000;
        cache_24hr 1000;
        lastposition 1000;
        lastweather 1000;
        messages 1000;
        position 1000;
        raw 1000;
        weather 1000;
        telemetry 1000;
        object_expires 1000;
      } # openaprs.sql.cleanup.limit
    
      ## TABLES
      #
      # Sets the expiration time in seconds for each individual
      # tables records.
      #
      tables { 
        cache_30m 1800;
        cache_24hr 86400;
        raw 172800;
      } # openaprs.sql.cleanup.tables

      ##
      # INTERVAL <int>
      #
      # How often in seconds to run cleanup routine.
      #
      interval 1;

    } opaprs.sql.cleanup
  } # openaprs.sql

  #####
  # READ
  #
  # Options concerning how data is read from the APRS IS.
  #
  read {
    #####
    # BYTES <int>
    #
    # Number of bytes to read from the socket before
    # moving on to the next timer event (prevents blocking).
    #
    # This value should not need to be changed.
    #
    bytes 1024;

    #####
    # BACKLOG <int>
    #
    # Number of bytes to be queued in the buffer from the
    # APRS server before the connection is dropped and re-established.
    #
    # In the event that OpenAPRS isn't processing packets fast enough
    # to keep up with the APRS IS server this protects the process
    # from eating up memory.
    #
    backlog 102400;
  } # openaprs.read


  #####
  # SERVER <string>
  #
  # IP or hostname of APRS server you want to connect to.
  #
  server "second.aprs.net" {

    #####
    # PORT <int>
    #
    # Port of APRS server you want to connect to.  Standard APRS daemon server
    # to server port is 23.
    #
    port 23;

    #####
    # TIMEOUT <int>
    #
    # Number of seconds to wait with no data from the server
    # before we consider the connection stoned.
    #
    timeout 60;

  } # openaprs.server


  #####
  # STATS
  #
  # Options concerning statistical reporting.
  #
  stats {
    ####
    # REPORT <int>
    #
    # How often in seconds to send statistics report to log files.
    #
    report 300;
  } #openaprs.stats

  #####
  # PATH
  #
  # Options concerning paths of files commonly used by OpenAPRS.
  #
  path {

    #####
    # CONFIG <string>
    #
    # Relative path to openaprs's config file from where the binary is started.
    #
    config "etc/openaprs.conf";

    #####
    # PID <string>
    #
    # Relative path to pid file that should be written to on startup in
    # background mode.
    #
    pid "openaprs.pid";

    #####
    # LOGS <string>
    #
    # Directory to place log files.
    #
    logs "logs/" {

      #####
      # openaprs <string>
      #
      # Filename of normal openaprs logging, command logging and misc. functions.
      #
      openaprs "openaprs.log";

      #####
      # DEBUG <string>
      #
      # Filename of debug file, provides more verbose logging of bot's actions.
      #
      debug "openaprs.debug.log";

      #####
      # DROPPED <string>
      #
      # Filename of debug file that provides all dropped packets.
      #
      dropped "openaprs.debug.dropped.log";

      #####
      # SOCKET <string>
      #
      # Filename of debug file that provides all socket output between the
      # client and server.
      #
      socket "openaprs.debug.socket.log";

      #####
      # PACKET <string>
      #
      # Filename of debug file that provides all event data.
      #
      packet "openaprs.debug.packet.log";
    } # openaprs.path.logs
  } # openaprs.path

  ####  
  # VERIFY 
  # 
  # When a user verifies their license status
  # on the OpenAPRS website they will send a message
  # to this callsign.
  #
  VERIFY {
    ##
    # ENABLE  
    # 
    # Enables website license verification.      
    #
    enable false;

    ##
    # REPLY
    # 
    # Send verification messages through APRS-IS hoping they
    # will get igated back to source.
    #
    reply false;
  }

  ####
  # LOG
  #
  # Options concerning how logging is handled.
  #
  log {
    #####
    # FLUSH <bool>
    #
    # For debugging this will flush the debug output immediately
    # when a message is sent.
    #
    flush true;

    #####
    # TIMESTAMP <bool>
    #
    # Enable timestamping in log files.
    #
    timestamp true;

    #####
    # FILTER <string>
    #
    # For debugging this will filter out all packet events
    # accept those under this tree.
    #
    #filter "root.aprs.packet.symbol";

    #####
    # FILTER.SQL <string>
    #
    # For debugging this will filter out all timed sql logs.
    #
    #filter.sql 0;

    #####
    # MONITOR.SOURCE <string>
    #
    # Monitor packets for a particular source and log.
    #
    #monitor.source "W6CO-5";

  } # openaprs.log

  
  ####
  # SIGNUPS
  #
  # Options concerning how logging is handled.
  #
  signups {
    #####
    # ACTIVE.UNTIL <int>
    #
    # Signs will be active until this many seconds or they activate their account.
    #
    active.until 172800
  } # openaprs.signups
} # openaprs
